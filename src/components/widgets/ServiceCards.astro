---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import { Icon } from 'astro-icon/components';
import Button from '~/components/ui/Button.astro';
import ServiceHeading from '../ui/ServiceHeading.astro';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  services = [],
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

// Beautiful gradient combinations matching Features2
const cardGradients = [
  'from-primary via-primary/90 to-secondary',      // Purple gradient
  'from-accent via-accent/90 to-primary',          // Pink to purple  
  'from-secondary via-secondary/90 to-primary',    // Blue-purple gradient
];
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <ServiceHeading title={title} subtitle={subtitle} tagline={tagline} classes={classes?.headline as Record<string, string>} />
  
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
    {services.map(({ title: serviceTitle, description, icon, callToAction }, index) => (
      <div class="group">
        <div class={`relative h-[400px] bg-gradient-to-br ${cardGradients[index % cardGradients.length]} rounded-3xl p-8 flex flex-col hover:scale-[1.02] transition-all duration-300`}>
          
          <!-- Icon Container -->
          {icon && (
            <div class="mb-6">
              <div class="w-16 h-16 bg-white/15 backdrop-blur-sm rounded-2xl flex items-center justify-center border border-white/20">
                <Icon name={icon} class="w-8 h-8 text-white" />
              </div>
            </div>
          )}

          <!-- Title -->
          {serviceTitle && (
            <h3 class="text-2xl font-bold text-white mb-4 leading-tight">
              {serviceTitle}
            </h3>
          )}
          
          <!-- Description -->
          {description && (
            <p class="text-white/90 leading-relaxed mb-6 flex-grow">
              {description}
            </p>
          )}

          <!-- CTA Button -->
          {callToAction && (
            <Button
              {...callToAction}
              class="w-full bg-white/20 backdrop-blur-sm hover:bg-white/30 text-white font-semibold px-6 py-4 rounded-2xl transition-all duration-300 border border-white/30 hover:border-white/50 mt-auto"
            />
          )}

          <!-- Subtle hover overlay -->
          <div class="absolute inset-0 bg-white/5 rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
        </div>
      </div>
    ))}
  </div>
</WidgetWrapper>